#ifndef EPOS_DRIVER_HPP
#define EPOS_DRIVER_HPP

#include "ros/ros.h"
#include "std_msgs/String.h"
#include "tf/transform_broadcaster.h"

#include "libepos/epos.h" 

#include <boost/thread/mutex.hpp> 

#include <string>
#include <sstream>
#include <signal.h>

#include <epos_driver/EPOSState.h>
#include <epos_driver/MoveTo.h>
#include <epos_driver/MoveCycle.h>

/** @brief Interface class for the servomotor controller
 *
 * This class impelents iterface for the epos servomotor
 * controller. It is based on libray epos.h.
 */
class eposDriver{
public:

  /*! @brief Configuration of the node */
  eposDriver(ros::NodeHandle param); 
  /*! @todo do we need explicite destructor?*/
  ~eposDriver(){};
  /*! @brief setup the servomotor*/
  int On();
  /*! @brief turn off the servomotor*/
  int Off();
  /*! @brief The main loop handling all the functionalities of the driver */
  int Main();

private:
  ///< @todo add radPerTick constat
  ros::NodeHandle nh; ///< node handler
  ros::Publisher state_publisher;///< state publisher of EPOS servomotor 
  std::string port; ///< path to the epos device 
  bool use_radps; ///< true if you want to use radians per second false if you want to use rpm 
  double p_max_velocity_radps; ///< maximum velocity of the motor [rad/s] (prameter handeler) 
  double p_accel_radpss; ///< accelaeration ot the motor [rad/s^s] (prameter handeler) 
  double p_deccel_radpss; ///< decelleration ot the motor [rad/s^s] (prameter handeler) 
  int p_max_velocity_rpm; ///< maximum velocity of the motor [rpm] (prameter handeler) 
  int p_accel_rpmps; ///< acceleration of the motor [rpm/s] (prameter handeler) 
  int p_deccel_rpmps; ///< deceleration of the motor [rpm/s] (prameter handeler) 
  bool use_trapezoidal; ///< true if you want to use trapezoidal profile false for sinusoidal 
  unsigned int max_velocity; ///< maximum velocity of the motor [rpm]
  unsigned int accel; ///< acceleration of the motor [rpm/s] 
  unsigned int deccel; ///< deceleration of the motor [rpm/s] 
  int motor_state; ///< Motor on=1 off=0 @todo where is it used & why we need this?
  unsigned int module_count; ///< number of controlled modules @todo where is it used & why we need this?
  int topic_frequency; ///< frequency at which the topic with state is published
  double high_limit; ///< the top limit of the cyclic motion of sensor
  double low_limit; ///< the bottom limit of the cyclic motion of sensor
  bool move_down;///< flag for direction of movement to low_limit
  bool move_up;///< flag for direction of movement to high_limit
  bool move_single;///< flag for single movement
  std::string my_frame_id;///< name of my coordination frame
  std::string parent_frame_id;///< name of my parent coordination frame
  double sensor_pose_x;///< x position of the wrist
  double sensor_pose_y;///< y position of the wrist
  double sensor_pose_z;///< z position of the wrist

  /*! @brief Converts radians to rotations */
  unsigned int Radps2rpm(double radps);
  /*! @brief This function displays the error status */
  int EposError();
  /*! @brief This function displays the statueof epos */
  int EposState();
  /*! @brief This is a handler to a service for a single move*/
  bool MoveTo(epos_driver::MoveTo::Request &req,epos_driver::MoveTo::Response  &res);
   /*! @brief This is a handler to a service for a cyclic move*/
  bool MoveCycle(epos_driver::MoveCycle::Request &req,epos_driver::MoveCycle::Response &res);
  
};
#endif
